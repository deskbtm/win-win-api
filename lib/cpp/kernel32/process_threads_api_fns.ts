import { HANDLE, VOID, PHANDLE, PCWSTR } from '../user32/win_nt';
import { LPSECURITY_ATTRIBUTES, LPTHREAD_START_ROUTINE } from '../user32/win_base';
import { LPVOID, DWORD, LPDWORD, BOOL, UINT, INT, HRESULT, PULONG } from '../user32/win_def';
import { SIZE_T } from '../user32/base_tsd';

export const processThreadsApiFns = {
	// CreateProcessA: [
	// 	BOOL,
	// 	[
	// 		LPCSTR,
	// 		LPSTR,
	// 		LPSECURITY_ATTRIBUTES,
	// 		LPSECURITY_ATTRIBUTES,
	// 		BOOL,
	// 		DWORD,
	// 		LPVOID,
	// 		LPCSTR,
	// 		LPSTARTUPINFOA,
	// 		LPPROCESS_INFORMATION,
	// 	],
	// ],
	// CreateProcessAsUserA: [BOOL, [HANDLE, LPCSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCSTR, LPSTARTUPINFOA, LPPROCESS_INFORMATION]],
	// CreateProcessAsUserW: [BOOL, [HANDLE, LPCWSTR, LPWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION]],
	// CreateProcessW: [BOOL, [LPCWSTR, LPWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION]],
	// CreateRemoteThread: [HANDLE, [HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD]],
	// CreateRemoteThreadEx: [HANDLE, [HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPPROC_THREAD_ATTRIBUTE_LIST, LPDWORD]]
	// DeleteProcThreadAttributeList: [VOID, [LPPROC_THREAD_ATTRIBUTE_LIST]],
	// ExitProcess: [VOID, [UINT]],
	// FlushInstructionCache: [BOOL, [HANDLE, LPCVOID, SIZE_T]],
	// FlushProcessWriteBuffers: [VOID, [\placeholder]],
	// GetCurrentProcess: [HANDLE, [\placeholder]],
	// GetCurrentProcessId: [DWORD, [\placeholder]],
	// GetCurrentProcessorNumber: [DWORD, [\placeholder]],
	// GetCurrentProcessorNumberEx: [VOID, [PPROCESSOR_NUMBER]],
	// GetCurrentProcessToken: [HANDLE, [\placeholder]],
	// GetCurrentThread: [HANDLE, [\placeholder]],
	// GetCurrentThreadEffectiveToken: [HANDLE, [\placeholder]],
	// GetCurrentThreadId: [DWORD, [\placeholder]],
	// GetCurrentThreadStackLimits: [VOID, [PULONG_PTR, PULONG_PTR]],
	// GetCurrentThreadToken: [HANDLE, [\placeholder]],
	// GetExitCodeProcess: [BOOL, [HANDLE, LPDWORD]],
	// GetExitCodeThread: [BOOL, [HANDLE, LPDWORD]],
	// GetPriorityClass: [DWORD, [HANDLE]],
	// GetProcessHandleCount: [BOOL, [HANDLE, PDWORD]],
	// GetProcessId: [DWORD, [HANDLE]],
	// GetProcessIdOfThread: [DWORD, [HANDLE]],
	// GetProcessInformation: [BOOL, [HANDLE, PROCESS_INFORMATION_CLASS, LPVOID, DWORD]],
	// GetProcessMitigationPolicy: [BOOL, [HANDLE, PROCESS_MITIGATION_POLICY, PVOID, SIZE_T]],
	// GetProcessPriorityBoost: [BOOL, [HANDLE, PBOOL]],
	// GetProcessShutdownParameters: [BOOL, [LPDWORD, LPDWORD]],
	// GetProcessTimes: [BOOL, [HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME]],
	// GetProcessVersion: [DWORD, [DWORD]],
	// GetStartupInfoW: [VOID, [LPSTARTUPINFOW]],
	// GetSystemTimes: [BOOL, [PFILETIME, PFILETIME, PFILETIME]],
	// GetThreadContext: [BOOL, [HANDLE, LPCONTEXT]],
	// GetThreadDescription: [HRESULT, [HANDLE, PWSTR]],
	// GetThreadId: [DWORD, [HANDLE]],
	// GetThreadIdealProcessorEx: [BOOL, [HANDLE, PPROCESSOR_NUMBER]],
	// GetThreadInformation: [BOOL, [HANDLE, THREAD_INFORMATION_CLASS, LPVOID, DWORD]],
	// GetThreadIOPendingFlag: [BOOL, [HANDLE, PBOOL]],
	// GetThreadPriority: [INT, [HANDLE]],
	// GetThreadPriorityBoost: [BOOL, [HANDLE, PBOOL]],
	// GetThreadTimes: [BOOL, [HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME]],
	// InitializeProcThreadAttributeList: [BOOL, [LPPROC_THREAD_ATTRIBUTE_LIST, DWORD, DWORD, PSIZE_T]],
	// IsProcessCritical: [BOOL, [HANDLE, PBOOL]],
	// IsProcessorFeaturePresent: [BOOL, [DWORD]],
	// OpenProcess: [HANDLE, [DWORD, BOOL, DWORD]],
	// OpenProcessToken: [BOOL, [HANDLE, DWORD, PHANDLE]],
	// OpenThread: [HANDLE, [DWORD, BOOL, DWORD]],
	// OpenThreadToken: [BOOL, [HANDLE, DWORD, BOOL, PHANDLE]],
	// ProcessIdToSessionId: [BOOL, [DWORD, DWORD]],
	// QueryProcessAffinityUpdateMode: [BOOL, [HANDLE, LPDWORD]],
	// QueryProtectedPolicy: [BOOL, [LPCGUID, PULONG_PTR]],
	// QueueUserAPC: [DWORD, [PAPCFUNC, HANDLE, ULONG_PTR]],
	// ResumeThread: [DWORD, [HANDLE]],
	// SetPriorityClass: [BOOL, [HANDLE, DWORD]],
	// SetProcessAffinityUpdateMode: [BOOL, [HANDLE, DWORD]],
	// SetProcessDynamicEHContinuationTargets: [BOOL, [HANDLE, USHORT, PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET]],
	// SetProcessInformation: [BOOL, [HANDLE, PROCESS_INFORMATION_CLASS, LPVOID, DWORD]],
	// SetProcessMitigationPolicy: [BOOL, [PROCESS_MITIGATION_POLICY, PVOID, SIZE_T]],
	// SetProcessPriorityBoost: [BOOL, [HANDLE, BOOL]],
	// SetProcessShutdownParameters: [BOOL, [DWORD, DWORD]],
	// SetProtectedPolicy: [BOOL, [LPCGUID, ULONG_PTR, PULONG_PTR]],
	// SetThreadContext: [BOOL, [HANDLE, CONST, CONTEXT]],
	// SetThreadIdealProcessorEx: [BOOL, [HANDLE, PPROCESSOR_NUMBER, PPROCESSOR_NUMBER]],
	// SetThreadInformation: [BOOL, [HANDLE, THREAD_INFORMATION_CLASS, LPVOID, DWORD]],
	// TlsAlloc: [DWORD, [\placeholder]],
	// UpdateProcThreadAttribute: [BOOL, [LPPROC_THREAD_ATTRIBUTE_LIST, DWORD, DWORD_PTR, PVOID, SIZE_T, PVOID, PSIZE_T]],
	CreateThread: [HANDLE, [LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD]],
	ExitThread: [VOID, [DWORD]],
	SetThreadDescription: [HRESULT, [HANDLE, PCWSTR]],
	SetThreadIdealProcessor: [DWORD, [HANDLE, DWORD]],
	SetThreadPriority: [BOOL, [HANDLE, INT]],
	SetThreadPriorityBoost: [BOOL, [HANDLE, BOOL]],
	SetThreadStackGuarantee: [BOOL, [PULONG]],
	SetThreadToken: [BOOL, [PHANDLE, HANDLE]],
	SuspendThread: [DWORD, [HANDLE]],
	SwitchToThread: [BOOL, []],
	TerminateProcess: [BOOL, [HANDLE, UINT]],
	TerminateThread: [BOOL, [HANDLE, DWORD]],
	TlsFree: [BOOL, [DWORD]],
	TlsGetValue: [LPVOID, [DWORD]],
	TlsSetValue: [BOOL, [DWORD, LPVOID]],
};
